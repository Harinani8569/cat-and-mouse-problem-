#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<pthread.h>

#define n_dishes 2
#define n_cats 4
#define n_rats 2
#define c_wait 10
#define c_eat 1
#define cat_eat 4
#define r_wait 1
#define r_eat 1
#define rat_eat 4

typedef struct dish {
    int free_dishes;            
    int cats_eating;            
    int mice_eating;            
    int cats_waiting;          
    enum {
        none_eating,
        cat_eating,
        mouse_eating
    } 
	status[N_DISHES];         
    pthread_mutex_t mutex;    
    pthread_cond_t free_cv;    
    pthread_cond_t cat_cv;    
    } dish_t;

static const char *progname = "pets";
static void dump_dish(const char *name, pthread_t pet, const char *what, dish_t *dish, int my_dish)
{
    int i;
     for (i = 0; i < N_DISHES; i++) {
        if (i) printf(":");
        switch (dish->status[i]) {
        case none_eating:
            printf("-");
            break;
        case cat_eating:
            printf("c");
            break;
        case mouse_eating:
            printf("m");
            break;
        }
    }
    printf("] %s (id %x) %s eating from dish %d\n", name, pet, what, my_dish);
}



int main(int argc,char *argv[])
{
printf("hai iam a nouse");
int i,err;
dish_t dish,*dish;
pthread_t cats[n_cats];
pthread_t rats[n_rats];

srand(time(NULL));
printf("cat is eating");

}
